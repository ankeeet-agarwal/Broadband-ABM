# Broadband-ABM
globals [
  similarity initial_blue initial_green ns cs np pc ndc cdc
    ]

turtles-own [
  afford inc edu dl
  wprice ;;sensitivity towards price
  wspeed ;;sensitivity towards speed
  wdatacap ;;Sensitivity towards datacap
  wreliability ;;
  wsocial
  wutility
  utility
  socialInfluence
  decisionValue
  initialUser?
  infoReceived?
  decisionMade?
    ]

to setup
  clear-all
  create-households
  setup-households
  intial-user-setup
  create-links
 ;; ask turtles [ ask my-links [ hide-link ] ]
  seeding
  reset-ticks
end

to create-households
  ask patches with [(random 100) < density]
  [
        ;; make each patch sprout one turtle and set the turtle's colour etc.
        sprout 1 [
            set shape "house"
            set color green
        ]
    ]
end

to setup-households
  ;; individual turtle initialization
    ask turtles [assign_weights
    set inc random 10
    set edu random 5
    set afford random-float 1 * (inc / 11)
    set dl random-float 1 * (edu / 6)
    set infoReceived? false
    set decisionMade? false
    ]
end

to intial-user-setup
  ask n-of (count turtles * initial_users) turtles [set initialUser? true set color blue]
  set initial_blue count turtles with [color = blue]
  set initial_green count turtles with [color = green]
end

to assign_weights
    set wprice random-float 1
    set wspeed random-float 1
    set wdatacap random-float 1
    set wreliability random-float 1
    set wsocial random-float 1
    set wutility random-float 1
end

to create-links
  let n 0
  while [n < count turtles][
  ask turtle n [
    ask other turtles[
     set similarity  (0.5 - ( inc - [inc] of myself) / 10) + (0.5 - (edu - [edu] of myself) / 5)
   ;;set similarity random-float 1 * (0.25 * ((wprice - [wprice] of myself) / wprice) +   0.25 * ((wspeed - [wspeed] of myself) / wspeed) + (0.25 * (wdatacap - [wdatacap] of myself) / wdatacap) + (0.25 * (wreliability - [wreliability] of myself) / wreliability)
        if abs similarity < similarity_threshold and abs similarity > random-float 1
        [
   ;; create-link-with turtle n

        ]
      ]
create-links-with n-of 3 other turtles
  ]

   set n n + 1
  ]

end

to go
  ;;if (all? turtles [decisionMade? = true]) [stop]
  if ticks = 6[stop]
  ask turtles[ diffusion influence]
  ask turtles[decision]
  tick
end

to seeding
  ;;selecting 5% random agents to start diffusion
    ask n-of (count turtles * 0.05) turtles [ set infoReceived? true utility-calculation]
end

to utility-calculation
  set ns speed_new / 1000
  set cs speed_current / 1000
  set np price_new / 200
  set pc price_current / 200
  set ndc datacap_new / 3000
  set cdc datacap_current / 3000
  ifelse initial_users = 0[utility_unserved][utility_underserved]
  set infoReceived? true
end

to utility_unserved
  ifelse afford + dl > 0.50 [set utility wspeed * ns - wprice * np + wdatacap * ndc + wreliability * reliability_new][set utility -1]
end

to utility_underserved
  ifelse initialUser? = true [set utility wspeed * (ns - cs) - wprice * (np - pc) + wdatacap * (ndc - cdc) + wreliability * (reliability_new - reliability_current)][utility_unserved]
end

to diffusion
  if infoReceived? = true [ask link-neighbors[utility-calculation]]
end

to influence
  set socialInfluence sum [utility] of link-neighbors / count link-neighbors
end

to decision
  set decisionValue wsocial * socialInfluence + wutility * utility
  if decisionValue > 0  [set color red
    set decisionMade? true]
  ;;set final_blue count turtles with [color = blue]
 ;; set final_red count turtles with [color = red]
  ;;set final_green count turtles with [color = green]
end

to-report new-adopters
  report (count turtles with [decisionValue > 0] / count turtles) * 100
end

to-report switched-users
  report count turtles with [color = blue]
end
