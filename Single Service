globals [total]
turtles-own [wtp inc
  wprice
  wspeed
  wlatency
  wdata
  error_var
  utility
  social      ;; of influence, set at initialisation to a random value
  decisionMade?
  influenced?

  intention?

]
to setup
  clear-all
  create-households
  setup-households
  reset-ticks
end

to create-households
   ask patches with [(random 100) < population_density]
  [
        ;; make each patch sprout one turtle and set the turtle's colour etc.
        sprout 1 [
            set shape "house"
            set color blue
        ]
    ]
end

to setup-households
  ;; individual turtle initialization
    ask turtles [assign_weights
    set inc random-normal mean_income 10000
    set wtp (inc / 12)* wtp%
    set error_var random-normal 0 1
    set decisionMade? false
    set influenced? false]

  ;;selecting 5% random agents to start diffusion
    ask n-of (count turtles * 0.05) turtles [ set color yellow utility-calculation ]

end

to assign_weights
  let randomNumbers n-values 4 [-> random-float 1]
    set total sum randomNumbers
    set randomNumbers map [i -> i / total] randomNumbers
    set wlatency item 0 randomNumbers
    set wprice item 1 randomNumbers
    set wspeed item 2 randomNumbers
    set wdata item 3 randomNumbers
end

to utility-calculation
  ;;calculation perceived_utility for each of the randomly selected agents
  ifelse wtp >= price
  [set utility wspeed * speed - wprice * price + wdata * datacap  ][set utility -1]
end

to go
  if (all? turtles [decisionMade? = true]) [stop]
  ask turtles[ diffusion infoReceived]
  if (all? turtles [color = yellow and utility != 0]) [ask turtles [decision]]
  ;;if (all? turtles [decisionMade? = true]) [ask turtles [influence]]
  tick
end

to diffusion
  if color = yellow
  [
    infoToFamily
    infoToNeighbors
  ]
end
to infoReceived
  if utility != 0
  [
  set color yellow
  ]
end

to infoToFamily
  ;;if any? turtles with [color = blue]
  ;;[
    ask n-of 3 turtles [utility-calculation]
  ;;]
end

to infoToNeighbors
  ask turtles-on neighbors
    [
      if color = blue
      [
        utility-calculation
      ]
    ]
end

;;to influence
    ;; turtle procedure
    ;; find the impact of supporters and opposers and change my colour
    ;; if the opposers' impact is greater than the supporters'

  ;;  let impactFromYellow 0
 ;; let impactFromGreen 0

 ;;   set impactFromYellow  sum [impact myself] of turtles with [color = yellow]
 ;;   set impactFromGreen  sum [impact myself] of turtles with [color = green]

    ;; if the impact from yellow is greater than that from greens, change the turtle's colour to
    ;; white, and vice versa

    ;;if color = green and (impactFromYellow > impactFromGreen)
     ;;   [set color yellow]
    ;;if color = yellow and (impactFromGreen > impactFromYellow)
     ;;   [set color green]
 ;;set influenced? true
;;end

;;to-report impact [otherTurtle]    ;; turtle procedure
    ;; report the impact of otherTurtle on myself
   ;; let d 0

   ;; set d distance otherTurtle
   ;; if (d = 0) [set d self-distance]
        ;; (exp ((ln d) * exponent)) calculates d to the power 'exponent'
    ;;report square (strength / (exp ((ln d) * exponent)))
;;end

;;to-report square [x]
    ;;report x * x
;;end


to decision
 if utility > 0 [set color green]
 set decisionMade? true
end

to-report potential-adopters
  report (count turtles with [color = green] / count turtles) * 100
end
